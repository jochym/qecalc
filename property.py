import string
from parser.qe_io_dict import *
import numpy

from setting import Setting

class Property(Setting):
    def __init__(self, fname=None):
        Setting.__init__(self, fname)

    def getTotalEnergy(self):
        'Extract total energy value from pwscf output'
        #read Espresso output into memory:
        pwscfOut = read_file(self.pwscfOutput)
        key = find_key_from_marker_string(pwscfOut, '!', 'total energy')
        words = string.split(pwscfOut[key])
        return [float(words[4])]
    
    def getSinglePhonon(self):
        'Obtain a list of phonon modes from output generated by dynmat.x'
        dynmatOut = read_file(self.dynmatOutput)
        keyStart = find_key_from_marker_string(dynmatOut, '#', 'mode')
        modeNum = 1
        key = keyStart + 1
        words = string.split(dynmatOut[key])
        modes = []
        while words[0]	 == str(modeNum):
            modes.append( float(words[1]) )
            key = key + 1
            modeNum = modeNum + 1
            words = string.split(dynmatOut[key])
        return modes
        
    def getLatticeParameters(self):
        'Extract lattice parameters after pwscf geometry optimization'
        from qelattice import QELattice
        # obtain lattice from PWSCF input file:
        lat = QELattice(fname = self.pwscfInput)
        pwscfOut = read_file(self.pwscfOutput)
        key_a_0 = find_key_from_string(pwscfOut, 'lattice parameter (a_0)')
        a_0 = float( string.split( pwscfOut[key_a_0] )[4] )
        if lat.type == 'traditional': a_0 = a_0*0.529177249 # convert back to angstrom
        keyEnd = max( find_all_keys_from_marker_string(pwscfOut, '!', 'total energy') )
        keyCellPar = find_key_from_string_afterkey(pwscfOut, keyEnd, \
                                                  'CELL_PARAMETERS (alat)') + 1
        latticeVectors = [[float(valstr)*a_0 for valstr in string.split( pwscfOut[keyCellPar] ) ],
                         [ float(valstr)*a_0 for valstr in string.split( pwscfOut[keyCellPar+1] ) ],
                         [ float(valstr)*a_0 for valstr in string.split( pwscfOut[keyCellPar+2] ) ]]
        lat.setLatticeFromQEVectors(lat.ibrav, latticeVectors)
        return [lat.a, lat.b, lat.c, lat.cBC ,lat.cAC , lat.cAB]
        
    def getMultiPhonon(self, fname = None):
        ''' Obtain a list of phonon modes and eigen vectors from output generated \
             by matdyn.x'''
        from parser.matdyn import matdyn
        if fname == None: return matdyn( matdynModes )
        else: return matdyn( fname )
        
     
